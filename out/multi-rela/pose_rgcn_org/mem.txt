File: rgcn_pose.py
Function: train at line 67

Line # Max usage   Peak usage diff max diff peak  Line Contents
===============================================================
    67                                           @profile
    68                                           def train(epoch):
    69   202.57M      218.00M   16.67M   12.00M      model.train()
    70   202.57M      218.00M    0.00B    0.00B      optimizer.zero_grad()
    71
    72   207.55M      240.00M    4.98M   22.00M      z = torch.matmul(data.feat, model.embedding)
    73     1.84G        3.49G    1.63G    3.25G      z = model.rgcn1(z, data.train_idx, data.train_et, data.train_range)
    74     2.65G        3.47G  835.62M  -18.00M      z = model.rgcn2(z, data.train_idx, data.train_et, data.train_range)
    75
    76     2.65G        2.67G    0.00B -818.00M      pos_index = data.train_idx
    77     2.75G        2.91G  104.00M  250.00M      neg_index = typed_negative_sampling(data.train_idx, data.n_node, data.train_range).to(device)
    78
    79     4.40G        4.83G    1.65G    1.91G      pos_score = model.dmt(z, pos_index, data.train_et)
    80     6.05G        6.83G    1.65G    2.01G      neg_score = model.dmt(z, neg_index, data.train_et)
    81                                               # pos_score = checkpoint(model.dmt, z, pos_index, data.train_et)
    82                                               # neg_score = checkpoint(model.dmt, z, neg_index, data.train_et)
    83
    84     6.08G        6.43G   25.98M -416.00M      pos_loss = -torch.log(pos_score + EPS).mean()
    85     6.11G        6.43G   25.98M    0.00B      neg_loss = -torch.log(1 - neg_score + EPS).mean()
    86     6.11G        6.43G  512.00B    0.00B      loss = pos_loss + neg_loss
    87
    88   359.72M        8.05G   -5.75G    1.63G      loss.backward()
    89
    90   359.72M      740.00M    0.00B   -7.33G      optimizer.step()
    91
    92   359.72M      738.00M    0.00B   -2.00M      record = np.zeros((3, data.n_edge_type))  # auprc, auroc, ap
    93
    94   359.72M      738.00M    0.00B    0.00B      model.eval()
    95   320.08M      804.00M  -39.64M   66.00M      neg_index = typed_negative_sampling(data.train_idx, data.n_drug, data.train_range[:-2]).to(device)
    96     1.31G        1.63G 1021.56M  862.00M      neg_score = model.dmt(z, neg_index, data.train_et[:neg_index.shape[1]])
    97
    98     1.31G        1.38G  194.50K -256.00M      for i in range(data.train_range.shape[0] - 2):
    99     1.31G        1.38G    0.00B    0.00B          [start, end] = data.train_range[i]
   100     1.31G        1.38G    0.00B    0.00B          p_s = pos_score[start: end]
   101     1.31G        1.38G    0.00B    0.00B          n_s = neg_score[start: end]
   102
   103     1.31G        1.38G    0.00B    0.00B          pos_target = torch.ones(p_s.shape[0])
   104     1.31G        1.38G    0.00B    0.00B          neg_target = torch.zeros(n_s.shape[0])
   105
   106     1.31G        1.38G    0.00B    0.00B          score = torch.cat([p_s, n_s])
   107     1.31G        1.38G    0.00B    0.00B          target = torch.cat([pos_target, neg_target])
   108
   109     1.31G        1.38G    0.00B    0.00B          record[0, i], record[1, i], record[2, i] = auprc_auroc_ap(target, score)
   110
   111     1.31G        1.38G -187.50K   -2.00M      out.train_record[epoch] = record
   112     1.31G        1.38G    0.00B    0.00B      [auprc, auroc, ap] = record.mean(axis=1)
   113     1.31G        1.38G    0.00B    0.00B      out.train_out[epoch] = [auprc, auroc, ap]
   114
   115     1.31G        1.38G    0.00B    0.00B      print('{:3d}   loss:{:0.4f}   auprc:{:0.4f}   auroc:{:0.4f}   ap@50:{:0.4f}'
   116     1.31G        1.38G    0.00B    0.00B            .format(epoch, loss.tolist(), auprc, auroc, ap))
   117   202.24M        1.38G   -1.11G    0.00B
   118     1.31G        1.38G    0.00B    0.00B      return z, loss
