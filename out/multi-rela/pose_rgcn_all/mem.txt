File: rgcn_pose.py
Function: train at line 67

Line # Max usage   Peak usage diff max diff peak  Line Contents
===============================================================
    67                                           @profile
    68                                           def train(epoch):
    69   202.57M      218.00M   16.67M   12.00M      model.train()
    70   202.57M      218.00M    0.00B    0.00B      optimizer.zero_grad()
    71
    72   207.55M      240.00M    4.98M   22.00M      z = torch.matmul(data.feat, model.embedding)
    73     1.84G        3.49G    1.63G    3.25G      z = model.rgcn1(z, data.train_idx, data.train_et, data.train_range)
    74     2.65G        3.47G  835.62M  -18.00M      z = model.rgcn2(z, data.train_idx, data.train_et, data.train_range)
    75
    76     2.65G        2.67G    0.00B -818.00M      pos_index = data.train_idx
    77
    78     2.75G        2.91G  104.00M  250.00M      neg_index = typed_negative_sampling(data.train_idx, data.n_node, data.train_range).to(device)
    79     2.75G        2.77G    0.00B -146.00M      tmp_index = typed_negative_sampling(data.train_idx, data.n_drug,
    80     2.82G        2.90G   64.36M  132.00M                                          data.train_range[:-2]).to(device)
    81     2.82G        2.94G    0.00B   38.00M      neg_index = torch.cat([tmp_index, neg_index[:, tmp_index.shape[1]:]], dim=1)
    82
    83     4.47G        4.89G    1.65G    1.96G      pos_score = model.dmt(z, pos_index, data.train_et)
    84     6.12G        6.90G    1.65G    2.01G      neg_score = model.dmt(z, neg_index, data.train_et)
    85                                               # pos_score = checkpoint(model.dmt, z, pos_index, data.train_et)
    86                                               # neg_score = checkpoint(model.dmt, z, neg_index, data.train_et)
    87
    88     6.14G        6.49G   25.98M -416.00M      pos_loss = -torch.log(pos_score + EPS).mean()
    89     6.17G        6.49G   25.98M    0.00B      neg_loss = -torch.log(1 - neg_score + EPS).mean()
    90     6.17G        6.49G  512.00B    0.00B      loss = pos_loss + neg_loss
    91
    92   424.08M        8.12G   -5.75G    1.63G      loss.backward()
    93
    94   424.08M      806.00M    0.00B   -7.33G      optimizer.step()
    95
    96   424.08M      804.00M    0.00B   -2.00M      record = np.zeros((3, data.n_edge_type))  # auprc, auroc, ap
    97
    98                                               # model.eval()
    99                                               # neg_index = typed_negative_sampling(data.train_idx, data.n_drug, data.train_range[:-2]).to(device)
   100                                               # neg_score = model.dmt(z, neg_index, data.train_et[:neg_index.shape[1]])
   101
   102   424.27M      806.00M  194.50K    2.00M      for i in range(data.train_range.shape[0] - 2):
   103   424.27M      806.00M    0.00B    0.00B          [start, end] = data.train_range[i]
   104   424.27M      806.00M    0.00B    0.00B          p_s = pos_score[start: end]
   105   424.27M      806.00M    0.00B    0.00B          n_s = neg_score[start: end]
   106
   107   424.27M      806.00M    0.00B    0.00B          pos_target = torch.ones(p_s.shape[0])
   108   424.27M      806.00M    0.00B    0.00B          neg_target = torch.zeros(n_s.shape[0])
   109
   110   424.27M      806.00M    0.00B    0.00B          score = torch.cat([p_s, n_s])
   111   424.27M      806.00M    0.00B    0.00B          target = torch.cat([pos_target, neg_target])
   112
   113   424.27M      806.00M    0.00B    0.00B          record[0, i], record[1, i], record[2, i] = auprc_auroc_ap(target, score)
   114
   115   424.09M      804.00M -187.50K   -2.00M      out.train_record[epoch] = record
   116   424.09M      804.00M    0.00B    0.00B      [auprc, auroc, ap] = record.mean(axis=1)
   117   424.09M      804.00M    0.00B    0.00B      out.train_out[epoch] = [auprc, auroc, ap]
   118
   119   424.09M      804.00M    0.00B    0.00B      print('{:3d}   loss:{:0.4f}   auprc:{:0.4f}   auroc:{:0.4f}   ap@50:{:0.4f}'
   120   424.09M      804.00M    0.00B    0.00B            .format(epoch, loss.tolist(), auprc, auroc, ap))
   121   202.24M      804.00M -221.85M    0.00B
   122   424.09M      804.00M    0.00B    0.00B      return z, loss