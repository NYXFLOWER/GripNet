File: dmt_pose.py
Function: train at line 61

Line # Max usage   Peak usage diff max diff peak  Line Contents
===============================================================
    61                                           @profile
    62                                           def train(epoch):
    63   183.65M      198.00M    0.00B   -6.00M      model.train()
    64   183.65M      198.00M    0.00B    0.00B      optimizer.zero_grad()
    65
    66   186.01M      198.00M    2.36M    0.00B      z = torch.matmul(data.feat, model.embedding)
    67
    68   186.01M      198.00M    0.00B    0.00B      pos_index = data.train_idx
    69   290.01M      446.00M  104.00M  248.00M      neg_index = typed_negative_sampling(data.train_idx, data.n_node, data.train_range).to(device)
    70
    71   290.01M      302.00M    0.00B -144.00M      tmp_index = typed_negative_sampling(data.train_idx, data.n_drug,
    72   354.38M      432.00M   64.36M  130.00M                                          data.train_range[:-2]).to(device)
    73   354.38M      472.00M    0.00B   40.00M      neg_index = torch.cat([tmp_index, neg_index[:, tmp_index.shape[1]:]], dim=1)
    74
    75     3.62G        4.45G    3.28G    3.99G      pos_score = model.dmt(z, pos_index, data.train_et)
    76     6.90G        8.48G    3.28G    4.04G      neg_score = model.dmt(z, neg_index, data.train_et)
    77                                               # pos_score = checkpoint(model.dmt, z, pos_index, data.train_et)
    78                                               # neg_score = checkpoint(model.dmt, z, neg_index, data.train_et)
    79
    80     6.92G        7.67G   25.98M -832.00M      pos_loss = -torch.log(pos_score + EPS).mean()
    81     6.95G        7.67G   25.98M    0.00B      neg_loss = -torch.log(1 - neg_score + EPS).mean()
    82     6.95G        7.67G  512.00B    0.00B      loss = pos_loss + neg_loss
    83
    84   408.81M        9.30G   -6.55G    1.62G      loss.backward()
    85
    86   413.75M        1.17G    4.94M   -8.12G      optimizer.step()
    87
    88   413.75M        1.17G    0.00B    0.00B      record = np.zeros((3, data.n_edge_type))  # auprc, auroc, ap
    89
    90                                               # model.eval()
    91                                               # neg_index = typed_negative_sampling(data.train_idx, data.n_drug, data.train_range[:-2]).to(device)
    92                                               # neg_score = model.dmt(z, neg_index, data.train_et[:neg_index.shape[1]])
    93
    94   413.94M        1.17G  194.50K    0.00B      for i in range(data.train_range.shape[0] - 2):
    95   413.94M        1.17G    0.00B    0.00B          [start, end] = data.train_range[i]
    96   413.94M        1.17G    0.00B    0.00B          p_s = pos_score[start: end]
    97   413.94M        1.17G    0.00B    0.00B          n_s = neg_score[start: end]
    98
    99   413.94M        1.17G    0.00B    0.00B          pos_target = torch.ones(p_s.shape[0])
   100   413.94M        1.17G    0.00B    0.00B          neg_target = torch.zeros(n_s.shape[0])
   101
   102   413.94M        1.17G    0.00B    0.00B          score = torch.cat([p_s, n_s])
   103   413.94M        1.17G    0.00B    0.00B          target = torch.cat([pos_target, neg_target])
   104
   105   413.94M        1.17G    0.00B    0.00B          record[0, i], record[1, i], record[2, i] = auprc_auroc_ap(target, score)
   106
   107   413.76M        1.17G -187.50K    0.00B      out.train_record[epoch] = record
   108   413.76M        1.17G    0.00B    0.00B      [auprc, auroc, ap] = record.mean(axis=1)
   109   413.76M        1.17G    0.00B    0.00B      out.train_out[epoch] = [auprc, auroc, ap]
   110
   111   413.76M        1.17G    0.00B    0.00B      print('{:3d}   loss:{:0.4f}   auprc:{:0.4f}   auroc:{:0.4f}   ap@50:{:0.4f}'
   112   413.76M        1.17G    0.00B    0.00B            .format(epoch, loss.tolist(), auprc, auroc, ap))
   113
   114   413.76M        1.17G    0.00B    0.00B      return z, loss